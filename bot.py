import os
import json
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from typing import List

# –ö–æ–Ω—Ñ–∏–≥–∏
client = OpenAI(api_key=os.getenv("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"))
TELEGRAM_BOT_TOKEN = os.getenv("7960455014:AAGPnZhaZHt238vqCtOQS610NPRdF_3fn9g")
HISTORY_FILE = "chat_history.json"
ADMIN_IDS = {123456789}  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ ID –∞–¥–º–∏–Ω–æ–≤

REPLY_TO_ALL = False
MEMORY_ENABLED = True
MAX_HISTORY_DEFAULT = 10
chat_history = {}  # type: dict[int, List[dict]]
max_history_length = MAX_HISTORY_DEFAULT


def load_history():
    global chat_history
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            chat_history = json.load(f)
            chat_history = {int(k): v for k, v in chat_history.items()}
    except FileNotFoundError:
        chat_history = {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def save_history():
    if not MEMORY_ENABLED:
        return
    try:
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(chat_history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history
    if update.message is None or update.message.text is None:
        return

    user_message = update.message.text
    chat_type = update.effective_chat.type
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bot_username = (await context.bot.get_me()).username

    if chat_type in ['group', 'supergroup']:
        if not REPLY_TO_ALL and f"@{bot_username}" not in user_message:
            return
        user_message = user_message.replace(f"@{bot_username}", "").strip()

    if chat_id not in chat_history:
        chat_history[chat_id] = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî IIsus, –º—É–¥—Ä—ã–π –∏ –¥–æ–±—Ä—ã–π —É—á–∏—Ç–µ–ª—å. "
                    "–û—Ç–≤–µ—á–∞–π —Å –ª—é–±–æ–≤—å—é, —Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. "
                    "–û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –ø—Ä–æ–ø–æ–≤–µ–¥–µ–π –∏ –¥–æ–±—Ä—ã—Ö –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–π."
                )
            }
        ]

    if MEMORY_ENABLED:
        chat_history[chat_id].append({"role": "user", "content": user_message})

        preserved_system = [m for m in chat_history[chat_id] if m["role"] == "system"]
        dynamic_messages = [m for m in chat_history[chat_id] if m["role"] != "system"]
        chat_history[chat_id] = preserved_system + dynamic_messages[-max_history_length:]
    else:
        chat_history[chat_id] = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî IIsus, –ø–æ–º–æ—â–Ω–∏–∫ –±–ª–∏–∑–Ω–∏—Ü–æ–≤"
                    "–û—Ç–≤–µ—á–∞–π —Å –ª—é–±–æ–≤—å—é, —Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. "
                    "–û–±—Ä–∞—â–∞–π—Å—è –∫ –±–ª–∏–∑–Ω–µ—Ü–∞–º —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –ø—Ä–æ–ø–æ–≤–µ–¥–µ–π –∏ –¥–æ–±—Ä—ã—Ö –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–π."
                )
            },
            {"role": "user", "content": user_message}
        ]

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=chat_history[chat_id]
        )
        reply = response.choices[0].message.content

        if MEMORY_ENABLED:
            chat_history[chat_id].append({"role": "assistant", "content": reply})
            save_history()

        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º", callback_data="reply_all"),
            InlineKeyboardButton("üîï –¢–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="mention_only"),
        ],
        [
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_history"),
            InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="show_history"),
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏", callback_data="memory_settings"),
            InlineKeyboardButton("üîï –í–∫–ª./–í—ã–∫–ª. –ø–∞–º—è—Ç—å", callback_data="toggle_memory"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:", reply_markup=reply_markup)


async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global REPLY_TO_ALL, MEMORY_ENABLED, chat_history, max_history_length
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    await query.answer()

    if not is_admin(user_id):
        await query.edit_message_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        return

    if query.data == "reply_all":
        REPLY_TO_ALL = True
        await query.edit_message_text("‚úÖ –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ.")
    elif query.data == "mention_only":
        REPLY_TO_ALL = False
        await query.edit_message_text("üîï –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏.")
    elif query.data == "clear_history":
        if chat_id in chat_history:
            del chat_history[chat_id]
            save_history()
        await query.edit_message_text("üßπ –ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
    elif query.data == "show_history":
        if chat_id not in chat_history or len(chat_history[chat_id]) <= 1:
            await query.edit_message_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            messages = [m for m in chat_history[chat_id] if m["role"] != "system"][-10:]
            text = "\n\n".join([f"{m['role']}: {m['content']}" for m in messages])
            await query.edit_message_text(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}")
    elif query.data == "memory_settings":
        await query.edit_message_text(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –ø–∞–º—è—Ç–∏: {max_history_length} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setmemory <—á–∏—Å–ª–æ> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 50)."
        )
    elif query.data == "toggle_memory":
        MEMORY_ENABLED = not MEMORY_ENABLED
        if not MEMORY_ENABLED:
            chat_history.clear()
            save_history()
        state = "–≤–∫–ª—é—á–µ–Ω–∞" if MEMORY_ENABLED else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await query.edit_message_text(f"üîï –ü–∞–º—è—Ç—å {state}.")


async def set_memory_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global max_history_length
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmemory <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50>")
        return

    new_length = int(context.args[0])
    if not (1 <= new_length <= 50):
        await update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50.")
        return

    max_history_length = new_length
    await update.message.reply_text(f"–î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {max_history_length} —Å–æ–æ–±—â–µ–Ω–∏–π.")


if __name__ == '__main__':
    load_history()

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("menu", show_menu))
    app.add_handler(CallbackQueryHandler(handle_menu_callback))
    app.add_handler(CommandHandler("setmemory", set_memory_command))

    print("ü§ñ IIsus –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
