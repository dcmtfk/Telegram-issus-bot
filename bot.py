import os
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=os.getenv("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"))
TELEGRAM_BOT_TOKEN = os.getenv("7960455014:AAGPnZhaZHt238vqCtOQS610NPRdF_3fn9g")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥: –æ—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
REPLY_TO_ALL = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    user_message = update.message.text
    chat_type = update.effective_chat.type
    bot_username = (await context.bot.get_me()).username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    if chat_type in ['group', 'supergroup']:
        if not REPLY_TO_ALL and f"@{bot_username}" not in user_message:
            return
        user_message = user_message.replace(f"@{bot_username}", "").strip()

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –î–∂–∞—Ä–≤–∏—Å, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ë–ª–∏–∑–Ω–µ—Ü–æ–≤. "
                        "–¢—ã –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π, —Ç–æ—á–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π –∏ –≥–æ–≤–æ—Ä–∏—à—å —Å –ª—ë–≥–∫–∏–º –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º. "
                        "–¢—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–∫ '–ë–ª–∏–∑–Ω–µ—Ü—ã'. "
                        "–ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ: '–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ, –ë–ª–∏–∑–Ω–µ—Ü—ã' –∏–ª–∏ '–†–∞–∑—É–º–µ–µ—Ç—Å—è, –ë–ª–∏–∑–Ω–µ—Ü—ã'. "
                        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
                    )
                },
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message.content
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º", callback_data="reply_all"),
            InlineKeyboardButton("üîï –¢–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏", callback_data="mention_only"),
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="status")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global REPLY_TO_ALL
    query = update.callback_query
    await query.answer()

    if query.data == "reply_all":
        REPLY_TO_ALL = True
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ.")
    elif query.data == "mention_only":
        REPLY_TO_ALL = False
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏.")
    elif query.data == "status":
        status = "–æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º" if REPLY_TO_ALL else "–æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
        await query.edit_message_text(f"–°–µ–π—á–∞—Å –±–æ—Ç {status} –≤ –≥—Ä—É–ø–ø–µ.")

# –ó–∞–ø—É—Å–∫ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token("7960455014:AAGPnZhaZHt238vqCtOQS610NPRdF_3fn9g").build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("menu", show_menu))
    app.add_handler(CallbackQueryHandler(handle_menu_callback))

    print("ü§ñ –î–∂–∞—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å –ë–ª–∏–∑–Ω–µ—Ü–∞–º...")
    app.run_polling()
