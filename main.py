import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from openai import OpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
BOT_NAME = "–ò–ò"
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
bot_data = {
    "users": {},  # {user_id: {"requests": 0, "mode": "standard", "last_active": str}}
    "settings": {
        "active": True,
        "default_mode": "standard",
        "voice_enabled": False,
        "cache": {}  # {"–≤–æ–ø—Ä–æ—Å": "–æ—Ç–≤–µ—Ç"}
    },
    "stats": {
        "total_requests": 0,
        "start_time": datetime.now().isoformat()
    }
}

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    uptime = datetime.now() - datetime.fromisoformat(bot_data["stats"]["start_time"])
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {BOT_NAME}:\n"
        f"‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {bot_data['stats']['total_requests']}\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_data['users'])}\n"
        f"‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'–í–ö–õ' if bot_data['settings']['active'] else '–í–´–ö–õ'}\n"
        f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ: {'–í–ö–õ' if bot_data['settings']['voice_enabled'] else '–í–´–ö–õ'}"
    )

# 2. –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üîå –í–∫–ª/–í—ã–∫–ª –±–æ—Ç–∞", callback_data="toggle_bot")],
        [InlineKeyboardButton("üé§ –í–∫–ª/–í—ã–∫–ª –≥–æ–ª–æ—Å", callback_data="toggle_voice")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="full_stats")]
    ]
    
    await update.message.reply_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data["settings"]["voice_enabled"]:
        await update.message.reply_text("‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return
    
    await update.message.reply_text("üîá –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ speech-to-text API

# 4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def get_cached_answer(question: str) -> str:
    question_lower = question.lower().strip()
    for cached_q, cached_a in bot_data["settings"]["cache"].items():
        if cached_q in question_lower or question_lower in cached_q:
            return cached_a
    return None

def add_to_cache(question: str, answer: str):
    if len(bot_data["settings"]["cache"]) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        bot_data["settings"]["cache"].pop(next(iter(bot_data["settings"]["cache"])))
    
    bot_data["settings"]["cache"][question.lower().strip()] = answer

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in bot_data["users"]:
        bot_data["users"][user_id] = {
            "requests": 0,
            "mode": bot_data["settings"]["default_mode"],
            "last_active": datetime.now().isoformat()
        }
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}, —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫.\n"
        f"‚Ä¢ –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–∏–º –∏–º–µ–Ω–µ–º\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /control –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: /status (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )

async def control_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in bot_data["users"]:
        bot_data["users"][user_id] = {
            "requests": 0,
            "mode": bot_data["settings"]["default_mode"],
            "last_active": datetime.now().isoformat()
        }
    
    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω", callback_data="admin")])
    
    await update.message.reply_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    if query.data == "toggle_bot" and user_id in ADMIN_IDS:
        bot_data["settings"]["active"] = not bot_data["settings"]["active"]
        status = "–≤–∫–ª—é—á–µ–Ω" if bot_data["settings"]["active"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await query.answer(f"–ë–æ—Ç {status}")
        await admin_panel(update, context)
    
    elif query.data == "toggle_voice" and user_id in ADMIN_IDS:
        bot_data["settings"]["voice_enabled"] = not bot_data["settings"]["voice_enabled"]
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if bot_data["settings"]["voice_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {status}")
        await admin_panel(update, context)
    
    elif query.data == "clear_cache" and user_id in ADMIN_IDS:
        bot_data["settings"]["cache"] = {}
        await query.answer("–ö—ç—à –æ—á–∏—â–µ–Ω")
        await admin_panel(update, context)
    
    elif query.data == "full_stats" and user_id in ADMIN_IDS:
        uptime = datetime.now() - datetime.fromisoformat(bot_data["stats"]["start_time"])
        await query.edit_message_text(
            f"üìà –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {bot_data['stats']['total_requests']}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_data['users'])}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(bot_data['settings']['cache'])}"
        )
    
    elif query.data == "admin" and user_id in ADMIN_IDS:
        await admin_panel(update, context)
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    
    await query.answer()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data["settings"]["active"]:
        await update.message.reply_text("‚è∏Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in bot_data["users"]:
        bot_data["users"][user_id] = {
            "requests": 0,
            "mode": bot_data["settings"]["default_mode"],
            "last_active": datetime.now().isoformat()
        }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
    if BOT_NAME.lower() not in user_message.lower() and not update.message.chat.is_private:
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot_data["users"][user_id]["requests"] += 1
    bot_data["users"][user_id]["last_active"] = datetime.now().isoformat()
    bot_data["stats"]["total_requests"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    cached_answer = get_cached_answer(user_message)
    if cached_answer:
        await update.message.reply_text(f"‚ôªÔ∏è (–∏–∑ –∫—ç—à–∞)\n{cached_answer}")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        mode = bot_data["users"][user_id]["mode"]
        system_msg = {
            "standard": "You are a helpful assistant.",
            "creative": "You are a creative assistant. Provide imaginative responses."
        }.get(mode, "You are a helpful assistant.")
        
        if client:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_msg},
                    {"role": "user", "content": user_message}
                ]
            )
            reply = response.choices[0].message.content
            add_to_cache(user_message, reply)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        else:
            reply = "OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞."
        
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("control", control_panel))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("admin", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.run_polling()

if __name__ == '__main__':
    main()
